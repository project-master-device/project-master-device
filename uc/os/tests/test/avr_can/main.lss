
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000007b2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  0000086a  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000395  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db0  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000624  00000000  00000000  00001a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba9  00000000  00000000  00002093  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000463  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000857  00000000  00000000  0000331f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000115  00000000  00000000  00003b76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 eb       	ldi	r30, 0xB2	; 178
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 30       	cpi	r26, 0x08	; 8
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

    // Set "button" input pin
    //DDRC  &= ~(1 << PC2);

    //timebase_init();
    spi_init();
  ae:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <spi_init>
  b2:	88 e8       	ldi	r24, 0x88	; 136
  b4:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	20 e9       	ldi	r18, 0x90	; 144
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0xe>
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0xc>
  c4:	88 e8       	ldi	r24, 0x88	; 136
  c6:	93 e1       	ldi	r25, 0x13	; 19
  c8:	f8 cf       	rjmp	.-16     	; 0xba <main+0xc>

000000ca <can_init>:

uint8_t can_init(uint8_t speedset)
{
	uint8_t res;
	
	res = mcp2515_init(speedset);
  ca:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mcp2515_init>
	
	if (res == MCP2515_OK) return CAN_OK;
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	88 23       	and	r24, r24
  d2:	09 f4       	brne	.+2      	; 0xd6 <can_init+0xc>
  d4:	90 e0       	ldi	r25, 0x00	; 0
	else return CAN_FAILINIT;
}
  d6:	89 2f       	mov	r24, r25
  d8:	08 95       	ret

000000da <can_initMessageStruct>:

void can_initMessageStruct(CanMessage* msg)
{
	memset(msg,0,sizeof(CanMessage));
  da:	fc 01       	movw	r30, r24
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	df 01       	movw	r26, r30
  e0:	1d 92       	st	X+, r1
  e2:	8a 95       	dec	r24
  e4:	e9 f7       	brne	.-6      	; 0xe0 <can_initMessageStruct+0x6>
}
  e6:	08 95       	ret

000000e8 <can_sendMessage>:

uint8_t can_sendMessage(const CanMessage* msg)
{
  e8:	bf 92       	push	r11
  ea:	cf 92       	push	r12
  ec:	df 92       	push	r13
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	0f 92       	push	r0
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	6c 01       	movw	r12, r24
	uint8_t res, txbuf_n;
	uint8_t timeout = 0;
	uint16_t time;
	
	time = timebase_actTime();
 102:	0e 94 b6 03 	call	0x76c	; 0x76c <timebase_actTime>
 106:	7c 01       	movw	r14, r24
	
	do {
		res = mcp2515_getNextFreeTXBuf(&txbuf_n); // info = addr.
 108:	8e 01       	movw	r16, r28
 10a:	0f 5f       	subi	r16, 0xFF	; 255
 10c:	1f 4f       	sbci	r17, 0xFF	; 255
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 cf 02 	call	0x59e	; 0x59e <mcp2515_getNextFreeTXBuf>
 114:	b8 2e       	mov	r11, r24
		if (timebase_passedTimeMS(time) > CANSENDTIMEOUT ) timeout = 1;
 116:	c7 01       	movw	r24, r14
 118:	0e 94 bf 03 	call	0x77e	; 0x77e <timebase_passedTimeMS>
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	89 3c       	cpi	r24, 0xC9	; 201
 120:	91 05       	cpc	r25, r1
 122:	08 f4       	brcc	.+2      	; 0x126 <can_sendMessage+0x3e>
 124:	20 e0       	ldi	r18, 0x00	; 0
	} while (res == MCP_ALLTXBUSY && !timeout);
 126:	8b 2d       	mov	r24, r11
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	19 f4       	brne	.+6      	; 0x132 <can_sendMessage+0x4a>
 12c:	22 23       	and	r18, r18
 12e:	79 f3       	breq	.-34     	; 0x10e <can_sendMessage+0x26>
 130:	0c c0       	rjmp	.+24     	; 0x14a <can_sendMessage+0x62>
	
	if (!timeout) {
 132:	22 23       	and	r18, r18
 134:	49 f4       	brne	.+18     	; 0x148 <can_sendMessage+0x60>
		mcp2515_write_canMsg( txbuf_n, msg);
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	b6 01       	movw	r22, r12
 13a:	0e 94 a6 02 	call	0x54c	; 0x54c <mcp2515_write_canMsg>
		mcp2515_start_transmit( txbuf_n );
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	0e 94 c9 02 	call	0x592	; 0x592 <mcp2515_start_transmit>
		return CAN_OK;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	01 c0       	rjmp	.+2      	; 0x14a <can_sendMessage+0x62>
	}
	else {
#if (CANDEBUG)
		term_puts_P("Transmit timeout\n");
#endif
		return CAN_FAILTX;
 148:	82 e0       	ldi	r24, 0x02	; 2
	}
}
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	df 90       	pop	r13
 15a:	cf 90       	pop	r12
 15c:	bf 90       	pop	r11
 15e:	08 95       	ret

00000160 <can_readMessage>:

uint8_t can_readMessage(CanMessage *msg)
{
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	00 d0       	rcall	.+0      	; 0x166 <can_readMessage+0x6>
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	bc 01       	movw	r22, r24
	uint8_t stat, res;
	
	stat = mcp2515_readStatus();
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	7a 83       	std	Y+2, r23	; 0x02
 170:	0e 94 ad 01 	call	0x35a	; 0x35a <mcp2515_readStatus>
	
	if ( stat & MCP_STAT_RX0IF ) {
 174:	69 81       	ldd	r22, Y+1	; 0x01
 176:	7a 81       	ldd	r23, Y+2	; 0x02
 178:	80 ff       	sbrs	r24, 0
 17a:	06 c0       	rjmp	.+12     	; 0x188 <can_readMessage+0x28>
		// Msg in Buffer 0
		mcp2515_read_canMsg( MCP_RXBUF_0, msg);
 17c:	81 e6       	ldi	r24, 0x61	; 97
 17e:	0e 94 47 02 	call	0x48e	; 0x48e <mcp2515_read_canMsg>
		mcp2515_modifyRegister(MCP_CANINTF, MCP_RX0IF, 0);
 182:	8c e2       	ldi	r24, 0x2C	; 44
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	07 c0       	rjmp	.+14     	; 0x196 <can_readMessage+0x36>
		res = CAN_OK;
	}
	else if ( stat & MCP_STAT_RX1IF ) {
 188:	81 ff       	sbrs	r24, 1
 18a:	0a c0       	rjmp	.+20     	; 0x1a0 <can_readMessage+0x40>
		// Msg in Buffer 1
		mcp2515_read_canMsg( MCP_RXBUF_1, msg);
 18c:	81 e7       	ldi	r24, 0x71	; 113
 18e:	0e 94 47 02 	call	0x48e	; 0x48e <mcp2515_read_canMsg>
		mcp2515_modifyRegister(MCP_CANINTF, MCP_RX1IF, 0);
 192:	8c e2       	ldi	r24, 0x2C	; 44
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	0e 94 8e 01 	call	0x31c	; 0x31c <mcp2515_modifyRegister>
		res = CAN_OK;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <can_readMessage+0x42>
	}
	else {
		res = CAN_NOMSG;
 1a0:	84 e0       	ldi	r24, 0x04	; 4
	}	
	
	return res;
}
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

000001ac <can_checkReceive>:
*/
uint8_t can_checkReceive(void)
{
	uint8_t res;
	
	res = mcp2515_readStatus(); // RXnIF in Bit 1 and 0
 1ac:	0e 94 ad 01 	call	0x35a	; 0x35a <mcp2515_readStatus>
	if ( res & MCP_STAT_RXIF_MASK ) {
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	83 70       	andi	r24, 0x03	; 3
 1b4:	90 70       	andi	r25, 0x00	; 0
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	11 f0       	breq	.+4      	; 0x1be <can_checkReceive+0x12>
		return CAN_MSGAVAIL;
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	08 95       	ret
	}
	else {
		return CAN_NOMSG;
 1be:	84 e0       	ldi	r24, 0x04	; 4
	}
}
 1c0:	08 95       	ret

000001c2 <can_checkError>:

/* checks Controller-Error-State, returns CAN_OK or CAN_CTRLERROR 
   only errors (and not warnings) lead to "CTRLERROR" */
uint8_t can_checkError(void)
{
	uint8_t eflg = mcp2515_readRegister(MCP_EFLG);
 1c2:	8d e2       	ldi	r24, 0x2D	; 45
 1c4:	0e 94 0d 01 	call	0x21a	; 0x21a <mcp2515_readRegister>

	if ( eflg & MCP_EFLG_ERRORMASK ) {
 1c8:	88 7f       	andi	r24, 0xF8	; 248
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <can_checkError+0xe>
		return CAN_CTRLERROR;
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	08 95       	ret
	}
	else {
		return CAN_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1d2:	08 95       	ret

000001d4 <spi_init>:

/* init as SPI-Master */
void spi_init(void)
{
	// SCK, SS!!, MOSI as outputs
    SPIDDR |= (1 << SPISCK);
 1d4:	bf 9a       	sbi	0x17, 7	; 23
    SPIDDR |= (1 << SPIMOSI);
 1d6:	bd 9a       	sbi	0x17, 5	; 23
    SPIDDR |= (1 << SPISS);
 1d8:	bb 9a       	sbi	0x17, 3	; 23

    // MISO as input
	SPIDDR &= ~(1 << SPIMISO);	// cbi(SPIDDR,SPIMISO);
 1da:	be 98       	cbi	0x17, 6	; 23
/*
    SPIPORT &= ~(1 << SPISCK);
    SPIPORT &= ~(1 << SPIMOSI);
    SPIPORT |=  (1 << SPISS);
*/	
    SPCR = (1<<SPE) | (1<<MSTR);
 1dc:	80 e5       	ldi	r24, 0x50	; 80
 1de:	8d b9       	out	0x0d, r24	; 13
    SPCR |=  (1 << MSTR);
    SPCR |=  (1 << SPE);
    SPCR |=  (1 << SPR0);
    SPCR |=  (1 << SPR1);
*/
}
 1e0:	08 95       	ret

000001e2 <spi_readwrite>:

uint8_t spi_readwrite(uint8_t data)
{
	// set data to send into SPI data register
	SPDR = data;
 1e2:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete 
	while(!(SPSR & (1<<SPIF)));
 1e4:	77 9b       	sbis	0x0e, 7	; 14
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <spi_readwrite+0x2>
	// return data read from SPI
	return SPDR;
 1e8:	8f b1       	in	r24, 0x0f	; 15
}
 1ea:	08 95       	ret

000001ec <spi_read>:

uint8_t spi_read(void)
{
	return spi_readwrite(SPIDONTCARE);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
}
 1f2:	08 95       	ret

000001f4 <mcp2515_readXXStatus_helper>:

static uint8_t mcp2515_readXXStatus_helper(const uint8_t cmd)
{
	uint8_t i;
	
	MCP2515_SELECT();
 1f4:	c3 98       	cbi	0x18, 3	; 24
	spi_readwrite(cmd);
 1f6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	i = spi_read();
 1fa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_read>
	MCP2515_UNSELECT();
 1fe:	c3 9a       	sbi	0x18, 3	; 24
	
	return i;
}
 200:	08 95       	ret

00000202 <mcp2515_reset>:
#include "termio.h"
#endif

void mcp2515_reset(void)
{
	MCP2515_SELECT();
 202:	c3 98       	cbi	0x18, 3	; 24
	spi_readwrite(MCP_RESET);
 204:	80 ec       	ldi	r24, 0xC0	; 192
 206:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	MCP2515_UNSELECT();
 20a:	c3 9a       	sbi	0x18, 3	; 24
	delay_ms(10); // rough - but > 128 MCP clock-cycles
 20c:	64 e2       	ldi	r22, 0x24	; 36
 20e:	78 e6       	ldi	r23, 0x68	; 104
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 ca 03 	call	0x794	; 0x794 <delayloop32>
}
 218:	08 95       	ret

0000021a <mcp2515_readRegister>:

uint8_t mcp2515_readRegister(const uint8_t address)
{
 21a:	1f 93       	push	r17
 21c:	18 2f       	mov	r17, r24
	uint8_t ret;
	
	MCP2515_SELECT();
 21e:	c3 98       	cbi	0x18, 3	; 24
	spi_readwrite(MCP_READ);
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	spi_readwrite(address);
 226:	81 2f       	mov	r24, r17
 228:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	ret = spi_read();
 22c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_read>
	MCP2515_UNSELECT();
 230:	c3 9a       	sbi	0x18, 3	; 24
	
	return ret;
}
 232:	1f 91       	pop	r17
 234:	08 95       	ret

00000236 <mcp2515_readRegisterS>:

void mcp2515_readRegisterS(const uint8_t address, 
	uint8_t values[], const uint8_t n)
{
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	df 93       	push	r29
 242:	cf 93       	push	r28
 244:	0f 92       	push	r0
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	18 2f       	mov	r17, r24
 24c:	06 2f       	mov	r16, r22
 24e:	f4 2e       	mov	r15, r20
	uint8_t i;
	
	MCP2515_SELECT();
 250:	c3 98       	cbi	0x18, 3	; 24
	spi_readwrite(MCP_READ);
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	79 83       	std	Y+1, r23	; 0x01
 256:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	spi_readwrite(address);
 25a:	81 2f       	mov	r24, r17
 25c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	// mcp2515 has auto-increment of address-pointer
	for (i=0; i<n; i++) {
 260:	79 81       	ldd	r23, Y+1	; 0x01
 262:	40 2f       	mov	r20, r16
 264:	57 2f       	mov	r21, r23
 266:	6a 01       	movw	r12, r20
 268:	05 c0       	rjmp	.+10     	; 0x274 <mcp2515_readRegisterS+0x3e>
		values[i] = spi_read();
 26a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_read>
 26e:	f6 01       	movw	r30, r12
 270:	81 93       	st	Z+, r24
 272:	6f 01       	movw	r12, r30
	
	MCP2515_SELECT();
	spi_readwrite(MCP_READ);
	spi_readwrite(address);
	// mcp2515 has auto-increment of address-pointer
	for (i=0; i<n; i++) {
 274:	8c 2d       	mov	r24, r12
 276:	80 1b       	sub	r24, r16
 278:	8f 15       	cp	r24, r15
 27a:	b8 f3       	brcs	.-18     	; 0x26a <mcp2515_readRegisterS+0x34>
		values[i] = spi_read();
	}
	MCP2515_UNSELECT();
 27c:	c3 9a       	sbi	0x18, 3	; 24
}
 27e:	0f 90       	pop	r0
 280:	cf 91       	pop	r28
 282:	df 91       	pop	r29
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	08 95       	ret

00000290 <mcp2515_setRegister>:

void mcp2515_setRegister(const uint8_t address, const uint8_t value)
{
 290:	1f 93       	push	r17
 292:	df 93       	push	r29
 294:	cf 93       	push	r28
 296:	0f 92       	push	r0
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	18 2f       	mov	r17, r24
	MCP2515_SELECT();
 29e:	c3 98       	cbi	0x18, 3	; 24
	spi_readwrite(MCP_WRITE);
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	69 83       	std	Y+1, r22	; 0x01
 2a4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	spi_readwrite(address);
 2a8:	81 2f       	mov	r24, r17
 2aa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	spi_readwrite(value);
 2ae:	69 81       	ldd	r22, Y+1	; 0x01
 2b0:	86 2f       	mov	r24, r22
 2b2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	MCP2515_UNSELECT();
 2b6:	c3 9a       	sbi	0x18, 3	; 24
}
 2b8:	0f 90       	pop	r0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	1f 91       	pop	r17
 2c0:	08 95       	ret

000002c2 <mcp2515_setRegisterS>:

void mcp2515_setRegisterS(const uint8_t address, 
	const uint8_t values[], const uint8_t n)
{
 2c2:	cf 92       	push	r12
 2c4:	df 92       	push	r13
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	0f 92       	push	r0
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	18 2f       	mov	r17, r24
 2d8:	06 2f       	mov	r16, r22
 2da:	f4 2e       	mov	r15, r20
	uint8_t i;
	
	MCP2515_SELECT();
 2dc:	c3 98       	cbi	0x18, 3	; 24
	spi_readwrite(MCP_WRITE);
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	79 83       	std	Y+1, r23	; 0x01
 2e2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	spi_readwrite(address);
 2e6:	81 2f       	mov	r24, r17
 2e8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	// mcp2515 has auto-increment of address-pointer
	for (i=0; i<n; i++) {
 2ec:	79 81       	ldd	r23, Y+1	; 0x01
 2ee:	40 2f       	mov	r20, r16
 2f0:	57 2f       	mov	r21, r23
 2f2:	6a 01       	movw	r12, r20
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <mcp2515_setRegisterS+0x3e>
		spi_readwrite(values[i]);
 2f6:	f6 01       	movw	r30, r12
 2f8:	81 91       	ld	r24, Z+
 2fa:	6f 01       	movw	r12, r30
 2fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	
	MCP2515_SELECT();
	spi_readwrite(MCP_WRITE);
	spi_readwrite(address);
	// mcp2515 has auto-increment of address-pointer
	for (i=0; i<n; i++) {
 300:	8c 2d       	mov	r24, r12
 302:	80 1b       	sub	r24, r16
 304:	8f 15       	cp	r24, r15
 306:	b8 f3       	brcs	.-18     	; 0x2f6 <mcp2515_setRegisterS+0x34>
		spi_readwrite(values[i]);
	}
	MCP2515_UNSELECT();
 308:	c3 9a       	sbi	0x18, 3	; 24
}
 30a:	0f 90       	pop	r0
 30c:	cf 91       	pop	r28
 30e:	df 91       	pop	r29
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	08 95       	ret

0000031c <mcp2515_modifyRegister>:

void mcp2515_modifyRegister(const uint8_t address, 
	const uint8_t mask, const uint8_t data)
{
 31c:	1f 93       	push	r17
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	00 d0       	rcall	.+0      	; 0x324 <mcp2515_modifyRegister+0x8>
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	18 2f       	mov	r17, r24
	MCP2515_SELECT();
 32a:	c3 98       	cbi	0x18, 3	; 24
	spi_readwrite(MCP_BITMOD);
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	4a 83       	std	Y+2, r20	; 0x02
 330:	69 83       	std	Y+1, r22	; 0x01
 332:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	spi_readwrite(address);
 336:	81 2f       	mov	r24, r17
 338:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	spi_readwrite(mask);
 33c:	69 81       	ldd	r22, Y+1	; 0x01
 33e:	86 2f       	mov	r24, r22
 340:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	spi_readwrite(data);
 344:	4a 81       	ldd	r20, Y+2	; 0x02
 346:	84 2f       	mov	r24, r20
 348:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_readwrite>
	MCP2515_UNSELECT();
 34c:	c3 9a       	sbi	0x18, 3	; 24
}
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	1f 91       	pop	r17
 358:	08 95       	ret

0000035a <mcp2515_readStatus>:
	return i;
}
	
uint8_t mcp2515_readStatus(void)
{
	return mcp2515_readXXStatus_helper(MCP_READ_STATUS);
 35a:	80 ea       	ldi	r24, 0xA0	; 160
 35c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mcp2515_readXXStatus_helper>
}
 360:	08 95       	ret

00000362 <mcp2515_RXStatus>:

uint8_t mcp2515_RXStatus(void)
{
	return mcp2515_readXXStatus_helper(MCP_RX_STATUS);
 362:	80 eb       	ldi	r24, 0xB0	; 176
 364:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mcp2515_readXXStatus_helper>
}
 368:	08 95       	ret

0000036a <mcp2515_setCANCTRL_Mode>:

uint8_t mcp2515_setCANCTRL_Mode(const uint8_t newmode)
{
 36a:	1f 93       	push	r17
 36c:	18 2f       	mov	r17, r24
	uint8_t i;
	
	mcp2515_modifyRegister(MCP_CANCTRL, MODE_MASK, newmode);
 36e:	8f e0       	ldi	r24, 0x0F	; 15
 370:	60 ee       	ldi	r22, 0xE0	; 224
 372:	41 2f       	mov	r20, r17
 374:	0e 94 8e 01 	call	0x31c	; 0x31c <mcp2515_modifyRegister>
	
	// verify as advised in datasheet
	i = mcp2515_readRegister(MCP_CANCTRL);
 378:	8f e0       	ldi	r24, 0x0F	; 15
 37a:	0e 94 0d 01 	call	0x21a	; 0x21a <mcp2515_readRegister>
	i &= MODE_MASK;
 37e:	98 2f       	mov	r25, r24
 380:	90 7e       	andi	r25, 0xE0	; 224
	
	if ( i == newmode ) {
		return MCP2515_OK; 
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	91 17       	cp	r25, r17
 386:	09 f4       	brne	.+2      	; 0x38a <mcp2515_setCANCTRL_Mode+0x20>
 388:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		return MCP2515_FAIL;
	}
}
 38a:	1f 91       	pop	r17
 38c:	08 95       	ret

0000038e <mcp2515_configRate>:


uint8_t mcp2515_configRate(const uint8_t canSpeed)
{
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
	uint8_t set, cfg1, cfg2, cfg3;
	
	set = 0;
	
	switch (canSpeed) {
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	31 f0       	breq	.+12     	; 0x3a2 <mcp2515_configRate+0x14>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	a1 f4       	brne	.+40     	; 0x3c2 <mcp2515_configRate+0x34>
		case (CAN_125KBPS) :
			cfg1 = MCP_4MHz_125kBPS_CFG1 ;
			cfg2 = MCP_4MHz_125kBPS_CFG2 ;
			cfg3 = MCP_4MHz_125kBPS_CFG3 ;
 39a:	12 e0       	ldi	r17, 0x02	; 2
	set = 0;
	
	switch (canSpeed) {
		case (CAN_125KBPS) :
			cfg1 = MCP_4MHz_125kBPS_CFG1 ;
			cfg2 = MCP_4MHz_125kBPS_CFG2 ;
 39c:	09 e8       	ldi	r16, 0x89	; 137
	
	set = 0;
	
	switch (canSpeed) {
		case (CAN_125KBPS) :
			cfg1 = MCP_4MHz_125kBPS_CFG1 ;
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <mcp2515_configRate+0x1a>
			set = 1;
			break;
		case (CAN_20KBPS) :
			cfg1 = MCP_4MHz_20kBPS_CFG1 ;
			cfg2 = MCP_4MHz_20kBPS_CFG2 ;
			cfg3 = MCP_4MHz_20kBPS_CFG3 ;
 3a2:	17 e0       	ldi	r17, 0x07	; 7
			cfg3 = MCP_4MHz_125kBPS_CFG3 ;
			set = 1;
			break;
		case (CAN_20KBPS) :
			cfg1 = MCP_4MHz_20kBPS_CFG1 ;
			cfg2 = MCP_4MHz_20kBPS_CFG2 ;
 3a4:	0a eb       	ldi	r16, 0xBA	; 186
			cfg2 = MCP_4MHz_125kBPS_CFG2 ;
			cfg3 = MCP_4MHz_125kBPS_CFG3 ;
			set = 1;
			break;
		case (CAN_20KBPS) :
			cfg1 = MCP_4MHz_20kBPS_CFG1 ;
 3a6:	64 e0       	ldi	r22, 0x04	; 4
			set = 0;
			break;
	}
	
	if (set) {
		mcp2515_setRegister(MCP_CNF1, cfg1);
 3a8:	8a e2       	ldi	r24, 0x2A	; 42
 3aa:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
		mcp2515_setRegister(MCP_CNF2, cfg2);
 3ae:	89 e2       	ldi	r24, 0x29	; 41
 3b0:	60 2f       	mov	r22, r16
 3b2:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
		mcp2515_setRegister(MCP_CNF3, cfg3);
 3b6:	88 e2       	ldi	r24, 0x28	; 40
 3b8:	61 2f       	mov	r22, r17
 3ba:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
		return MCP2515_OK;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <mcp2515_configRate+0x36>
	}
	else {
		return MCP2515_FAIL;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
	}
} 
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	08 95       	ret

000003ca <mcp2515_read_can_id>:

// ---

void mcp2515_read_can_id( const uint8_t mcp_addr, 
	uint8_t* ext, uint32_t* can_id )
{
 3ca:	ef 92       	push	r14
 3cc:	ff 92       	push	r15
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	df 93       	push	r29
 3d4:	cf 93       	push	r28
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <mcp2515_read_can_id+0xe>
 3d8:	00 d0       	rcall	.+0      	; 0x3da <mcp2515_read_can_id+0x10>
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	7b 01       	movw	r14, r22
 3e0:	8a 01       	movw	r16, r20
    uint8_t tbufdata[4];
	
    *ext = 0;
 3e2:	fb 01       	movw	r30, r22
 3e4:	10 82       	st	Z, r1
    *can_id = 0;
 3e6:	fa 01       	movw	r30, r20
 3e8:	10 82       	st	Z, r1
 3ea:	11 82       	std	Z+1, r1	; 0x01
 3ec:	12 82       	std	Z+2, r1	; 0x02
 3ee:	13 82       	std	Z+3, r1	; 0x03
    
	mcp2515_readRegisterS( mcp_addr, tbufdata, 4 );
 3f0:	be 01       	movw	r22, r28
 3f2:	6f 5f       	subi	r22, 0xFF	; 255
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	44 e0       	ldi	r20, 0x04	; 4
 3f8:	0e 94 1b 01 	call	0x236	; 0x236 <mcp2515_readRegisterS>
    
	*can_id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 3fc:	6a 81       	ldd	r22, Y+2	; 0x02
 3fe:	86 2f       	mov	r24, r22
 400:	82 95       	swap	r24
 402:	86 95       	lsr	r24
 404:	87 70       	andi	r24, 0x07	; 7
 406:	29 81       	ldd	r18, Y+1	; 0x01
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	e3 e0       	ldi	r30, 0x03	; 3
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	ea 95       	dec	r30
 412:	e1 f7       	brne	.-8      	; 0x40c <mcp2515_read_can_id+0x42>
 414:	28 0f       	add	r18, r24
 416:	31 1d       	adc	r19, r1
 418:	44 27       	eor	r20, r20
 41a:	37 fd       	sbrc	r19, 7
 41c:	40 95       	com	r20
 41e:	54 2f       	mov	r21, r20
 420:	f8 01       	movw	r30, r16
 422:	20 83       	st	Z, r18
 424:	31 83       	std	Z+1, r19	; 0x01
 426:	42 83       	std	Z+2, r20	; 0x02
 428:	53 83       	std	Z+3, r21	; 0x03
	
    if ( (tbufdata[MCP_SIDL] & MCP_TXB_EXIDE_M) ==  MCP_TXB_EXIDE_M ) {
 42a:	63 ff       	sbrs	r22, 3
 42c:	25 c0       	rjmp	.+74     	; 0x478 <mcp2515_read_can_id+0xae>
		// extended id
        *can_id = (*can_id<<2) + (tbufdata[MCP_SIDL] & 0x03);
        *can_id <<= 16;
        *can_id = *can_id +(tbufdata[MCP_EID8]<<8) + tbufdata[MCP_EID0];
 42e:	9b 81       	ldd	r25, Y+3	; 0x03
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	aa 27       	eor	r26, r26
 434:	97 fd       	sbrc	r25, 7
 436:	a0 95       	com	r26
 438:	ba 2f       	mov	r27, r26
 43a:	7c 81       	ldd	r23, Y+4	; 0x04
 43c:	87 0f       	add	r24, r23
 43e:	91 1d       	adc	r25, r1
 440:	a1 1d       	adc	r26, r1
 442:	b1 1d       	adc	r27, r1
    
	*can_id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
	
    if ( (tbufdata[MCP_SIDL] & MCP_TXB_EXIDE_M) ==  MCP_TXB_EXIDE_M ) {
		// extended id
        *can_id = (*can_id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 444:	72 e0       	ldi	r23, 0x02	; 2
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	44 1f       	adc	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	7a 95       	dec	r23
 450:	d1 f7       	brne	.-12     	; 0x446 <mcp2515_read_can_id+0x7c>
 452:	63 70       	andi	r22, 0x03	; 3
 454:	26 0f       	add	r18, r22
 456:	31 1d       	adc	r19, r1
 458:	41 1d       	adc	r20, r1
 45a:	51 1d       	adc	r21, r1
        *can_id <<= 16;
 45c:	a9 01       	movw	r20, r18
 45e:	33 27       	eor	r19, r19
 460:	22 27       	eor	r18, r18
        *can_id = *can_id +(tbufdata[MCP_EID8]<<8) + tbufdata[MCP_EID0];
 462:	82 0f       	add	r24, r18
 464:	93 1f       	adc	r25, r19
 466:	a4 1f       	adc	r26, r20
 468:	b5 1f       	adc	r27, r21
 46a:	80 83       	st	Z, r24
 46c:	91 83       	std	Z+1, r25	; 0x01
 46e:	a2 83       	std	Z+2, r26	; 0x02
 470:	b3 83       	std	Z+3, r27	; 0x03
        *ext = 1;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	f7 01       	movw	r30, r14
 476:	80 83       	st	Z, r24
    }
}
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	cf 91       	pop	r28
 482:	df 91       	pop	r29
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	08 95       	ret

0000048e <mcp2515_read_canMsg>:

// Buffer can be MCP_RXBUF_0 or MCP_RXBUF_1
void mcp2515_read_canMsg( const uint8_t buffer_sidh_addr,
	CanMessage* msg)
{
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	18 2f       	mov	r17, r24
 498:	eb 01       	movw	r28, r22

    uint8_t mcp_addr, ctrl;

	mcp_addr = buffer_sidh_addr;
	
    mcp2515_read_can_id( mcp_addr, &(msg->extended_identifier), 
 49a:	ab 01       	movw	r20, r22
 49c:	4f 5f       	subi	r20, 0xFF	; 255
 49e:	5f 4f       	sbci	r21, 0xFF	; 255
 4a0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <mcp2515_read_can_id>
		&(msg->identifier) );
    
	ctrl = mcp2515_readRegister( mcp_addr-1 );
 4a4:	81 2f       	mov	r24, r17
 4a6:	81 50       	subi	r24, 0x01	; 1
 4a8:	0e 94 0d 01 	call	0x21a	; 0x21a <mcp2515_readRegister>
 4ac:	08 2f       	mov	r16, r24
    msg->dlc = mcp2515_readRegister( mcp_addr+4 );
 4ae:	81 2f       	mov	r24, r17
 4b0:	8c 5f       	subi	r24, 0xFC	; 252
 4b2:	0e 94 0d 01 	call	0x21a	; 0x21a <mcp2515_readRegister>
 4b6:	8d 83       	std	Y+5, r24	; 0x05
    
	if (/*(*dlc & RTR_MASK) || */(ctrl & 0x08)) {
 4b8:	03 ff       	sbrs	r16, 3
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <mcp2515_read_canMsg+0x34>
        msg->rtr = 1;
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	9e 87       	std	Y+14, r25	; 0x0e
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <mcp2515_read_canMsg+0x36>
    } else {
        msg->rtr = 0;
 4c2:	1e 86       	std	Y+14, r1	; 0x0e
    }
    
	msg->dlc &= MCP_DLC_MASK;
 4c4:	48 2f       	mov	r20, r24
 4c6:	4f 70       	andi	r20, 0x0F	; 15
 4c8:	4d 83       	std	Y+5, r20	; 0x05
    mcp2515_readRegisterS( mcp_addr+5, &(msg->dta[0]), msg->dlc );
 4ca:	be 01       	movw	r22, r28
 4cc:	6a 5f       	subi	r22, 0xFA	; 250
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	81 2f       	mov	r24, r17
 4d2:	8b 5f       	subi	r24, 0xFB	; 251
 4d4:	0e 94 1b 01 	call	0x236	; 0x236 <mcp2515_readRegisterS>
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	0f 91       	pop	r16
 4e0:	08 95       	ret

000004e2 <mcp2515_write_can_id>:


void mcp2515_write_can_id( const uint8_t mcp_addr, 
	const uint8_t ext, const uint32_t can_id )
{
 4e2:	df 93       	push	r29
 4e4:	cf 93       	push	r28
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <mcp2515_write_can_id+0x6>
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <mcp2515_write_can_id+0x8>
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
    uint16_t canid;
    uint8_t tbufdata[4];
	
    canid = (uint16_t)(can_id & 0x0FFFF);
 4ee:	f9 01       	movw	r30, r18
    
	if ( ext == 1) {
 4f0:	61 30       	cpi	r22, 0x01	; 1
 4f2:	99 f4       	brne	.+38     	; 0x51a <__stack+0x1b>
        tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
 4f4:	2c 83       	std	Y+4, r18	; 0x04
        tbufdata[MCP_EID8] = (uint8_t) (canid / 256);
 4f6:	fb 83       	std	Y+3, r31	; 0x03
        canid = (uint16_t)( can_id / 0x10000L );
 4f8:	9a 01       	movw	r18, r20
        tbufdata[MCP_SIDL] = (uint8_t) (canid & 0x03);
        tbufdata[MCP_SIDL] += (uint8_t) ((canid & 0x1C )*8);
 4fa:	94 2f       	mov	r25, r20
 4fc:	9c 71       	andi	r25, 0x1C	; 28
 4fe:	99 0f       	add	r25, r25
 500:	99 0f       	add	r25, r25
 502:	99 0f       	add	r25, r25
    
	if ( ext == 1) {
        tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
        tbufdata[MCP_EID8] = (uint8_t) (canid / 256);
        canid = (uint16_t)( can_id / 0x10000L );
        tbufdata[MCP_SIDL] = (uint8_t) (canid & 0x03);
 504:	43 70       	andi	r20, 0x03	; 3
        tbufdata[MCP_SIDL] += (uint8_t) ((canid & 0x1C )*8);
 506:	94 0f       	add	r25, r20
        tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
 508:	98 60       	ori	r25, 0x08	; 8
 50a:	9a 83       	std	Y+2, r25	; 0x02
        tbufdata[MCP_SIDH] = (uint8_t) (canid / 32 );
 50c:	a5 e0       	ldi	r26, 0x05	; 5
 50e:	36 95       	lsr	r19
 510:	27 95       	ror	r18
 512:	aa 95       	dec	r26
 514:	e1 f7       	brne	.-8      	; 0x50e <__stack+0xf>
 516:	29 83       	std	Y+1, r18	; 0x01
 518:	0c c0       	rjmp	.+24     	; 0x532 <__stack+0x33>
    }
    else {
        tbufdata[MCP_SIDH] = (uint8_t) (canid / 8 );
 51a:	f3 e0       	ldi	r31, 0x03	; 3
 51c:	36 95       	lsr	r19
 51e:	27 95       	ror	r18
 520:	fa 95       	dec	r31
 522:	e1 f7       	brne	.-8      	; 0x51c <__stack+0x1d>
 524:	29 83       	std	Y+1, r18	; 0x01
        tbufdata[MCP_SIDL] = (uint8_t) ((canid & 0x07 )*32);
 526:	e2 95       	swap	r30
 528:	ee 0f       	add	r30, r30
 52a:	e0 7e       	andi	r30, 0xE0	; 224
 52c:	ea 83       	std	Y+2, r30	; 0x02
        tbufdata[MCP_EID0] = 0;
 52e:	1c 82       	std	Y+4, r1	; 0x04
        tbufdata[MCP_EID8] = 0;
 530:	1b 82       	std	Y+3, r1	; 0x03
    }
	mcp2515_setRegisterS( mcp_addr, tbufdata, 4 );
 532:	be 01       	movw	r22, r28
 534:	6f 5f       	subi	r22, 0xFF	; 255
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	44 e0       	ldi	r20, 0x04	; 4
 53a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <mcp2515_setRegisterS>
}
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	cf 91       	pop	r28
 548:	df 91       	pop	r29
 54a:	08 95       	ret

0000054c <mcp2515_write_canMsg>:

// Buffer can be MCP_TXBUF_0 MCP_TXBUF_1 or MCP_TXBUF_2
void mcp2515_write_canMsg( const uint8_t buffer_sidh_addr, 
	const CanMessage* msg)
{
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	08 2f       	mov	r16, r24
 556:	eb 01       	movw	r28, r22
    uint8_t mcp_addr, dlc;

	mcp_addr = buffer_sidh_addr;
	dlc = msg->dlc;
 558:	1d 81       	ldd	r17, Y+5	; 0x05
	
    mcp2515_setRegisterS(mcp_addr+5, &(msg->dta[0]), dlc );  // write data bytes
 55a:	6a 5f       	subi	r22, 0xFA	; 250
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8b 5f       	subi	r24, 0xFB	; 251
 560:	41 2f       	mov	r20, r17
 562:	0e 94 61 01 	call	0x2c2	; 0x2c2 <mcp2515_setRegisterS>
    mcp2515_write_can_id( mcp_addr, msg->extended_identifier,
 566:	29 81       	ldd	r18, Y+1	; 0x01
 568:	3a 81       	ldd	r19, Y+2	; 0x02
 56a:	4b 81       	ldd	r20, Y+3	; 0x03
 56c:	5c 81       	ldd	r21, Y+4	; 0x04
 56e:	80 2f       	mov	r24, r16
 570:	68 81       	ld	r22, Y
 572:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
		msg->identifier );  // write CAN id
    if ( msg->rtr == 1)  dlc |= MCP_RTR_MASK;  // if RTR set bit in byte
 576:	8e 85       	ldd	r24, Y+14	; 0x0e
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	09 f4       	brne	.+2      	; 0x57e <mcp2515_write_canMsg+0x32>
 57c:	10 64       	ori	r17, 0x40	; 64
    mcp2515_setRegister( (mcp_addr+4), dlc );  // write the RTR and DLC
 57e:	80 2f       	mov	r24, r16
 580:	8c 5f       	subi	r24, 0xFC	; 252
 582:	61 2f       	mov	r22, r17
 584:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <mcp2515_start_transmit>:
 */
// Buffer can be MCP_TXBUF_0 MCP_TXBUF_1 or MCP_TXBUF_2
void mcp2515_start_transmit(const uint8_t buffer_sidh_addr)
{
	// TXBnCTRL_addr = TXBnSIDH_addr - 1
    mcp2515_modifyRegister( buffer_sidh_addr-1 , MCP_TXB_TXREQ_M, 
 592:	81 50       	subi	r24, 0x01	; 1
 594:	68 e0       	ldi	r22, 0x08	; 8
 596:	48 e0       	ldi	r20, 0x08	; 8
 598:	0e 94 8e 01 	call	0x31c	; 0x31c <mcp2515_modifyRegister>
		MCP_TXB_TXREQ_M );
}
 59c:	08 95       	ret

0000059e <mcp2515_getNextFreeTXBuf>:

uint8_t mcp2515_getNextFreeTXBuf(uint8_t *txbuf_n)
{
 59e:	bf 92       	push	r11
 5a0:	cf 92       	push	r12
 5a2:	df 92       	push	r13
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	df 93       	push	r29
 5ae:	cf 93       	push	r28
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <mcp2515_getNextFreeTXBuf+0x14>
 5b2:	0f 92       	push	r0
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	7c 01       	movw	r14, r24
	uint8_t res, i, ctrlval;
	uint8_t ctrlregs[MCP_N_TXBUFFERS] = { MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL };
 5ba:	de 01       	movw	r26, r28
 5bc:	11 96       	adiw	r26, 0x01	; 1
 5be:	e1 e0       	ldi	r30, 0x01	; 1
 5c0:	f1 e0       	ldi	r31, 0x01	; 1
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	01 90       	ld	r0, Z+
 5c6:	0d 92       	st	X+, r0
 5c8:	81 50       	subi	r24, 0x01	; 1
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <mcp2515_getNextFreeTXBuf+0x26>
	
	res = MCP_ALLTXBUSY;
	*txbuf_n = 0x00;
 5cc:	f7 01       	movw	r30, r14
 5ce:	10 82       	st	Z, r1
 5d0:	8e 01       	movw	r16, r28
 5d2:	0f 5f       	subi	r16, 0xFF	; 255
 5d4:	1f 4f       	sbci	r17, 0xFF	; 255
	// TXBnCTRL_addr = TXBnSIDH_addr - 1
    mcp2515_modifyRegister( buffer_sidh_addr-1 , MCP_TXB_TXREQ_M, 
		MCP_TXB_TXREQ_M );
}

uint8_t mcp2515_getNextFreeTXBuf(uint8_t *txbuf_n)
 5d6:	b4 e0       	ldi	r27, 0x04	; 4
 5d8:	cb 2e       	mov	r12, r27
 5da:	d1 2c       	mov	r13, r1
 5dc:	cc 0e       	add	r12, r28
 5de:	dd 1e       	adc	r13, r29
	res = MCP_ALLTXBUSY;
	*txbuf_n = 0x00;
	
	// check all 3 TX-Buffers
	for (i=0; i<MCP_N_TXBUFFERS; i++) {
		ctrlval = mcp2515_readRegister( ctrlregs[i] );
 5e0:	f8 01       	movw	r30, r16
 5e2:	b1 90       	ld	r11, Z+
 5e4:	8f 01       	movw	r16, r30
 5e6:	8b 2d       	mov	r24, r11
 5e8:	0e 94 0d 01 	call	0x21a	; 0x21a <mcp2515_readRegister>
		if ( (ctrlval & MCP_TXB_TXREQ_M) == 0 ) {
 5ec:	83 fd       	sbrc	r24, 3
 5ee:	05 c0       	rjmp	.+10     	; 0x5fa <mcp2515_getNextFreeTXBuf+0x5c>
#if (MCPDEBUG_TXBUF)
			Debug_ByteToUart_P("Selected TX-Buffer", i+1);
#endif
			*txbuf_n = ctrlregs[i]+1; // return SIDH-address of Buffer
 5f0:	b3 94       	inc	r11
 5f2:	f7 01       	movw	r30, r14
 5f4:	b0 82       	st	Z, r11
			res = MCP2515_OK;
			return res; /* ! function exit */
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <mcp2515_getNextFreeTXBuf+0x64>
	
	res = MCP_ALLTXBUSY;
	*txbuf_n = 0x00;
	
	// check all 3 TX-Buffers
	for (i=0; i<MCP_N_TXBUFFERS; i++) {
 5fa:	0c 15       	cp	r16, r12
 5fc:	1d 05       	cpc	r17, r13
 5fe:	81 f7       	brne	.-32     	; 0x5e0 <mcp2515_getNextFreeTXBuf+0x42>
			res = MCP2515_OK;
			return res; /* ! function exit */
		}
	}
	
	return res;
 600:	82 e0       	ldi	r24, 0x02	; 2
}
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	cf 91       	pop	r28
 60a:	df 91       	pop	r29
 60c:	1f 91       	pop	r17
 60e:	0f 91       	pop	r16
 610:	ff 90       	pop	r15
 612:	ef 90       	pop	r14
 614:	df 90       	pop	r13
 616:	cf 90       	pop	r12
 618:	bf 90       	pop	r11
 61a:	08 95       	ret

0000061c <mcp2515_initCANBuffers>:

void mcp2515_initCANBuffers(void)
{
 61c:	1f 93       	push	r17
	uint8_t i, a1, a2, a3;
	
	// TODO: check why this is needed to receive extended 
	//   and standard frames
	// Mark all filter bits as don't care:
    mcp2515_write_can_id(MCP_RXM0SIDH, 0, 0);
 61e:	80 e2       	ldi	r24, 0x20	; 32
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	50 e0       	ldi	r21, 0x00	; 0
 62a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
    mcp2515_write_can_id(MCP_RXM1SIDH, 0, 0);
 62e:	84 e2       	ldi	r24, 0x24	; 36
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
    // Anyway, set all filters to 0:
    mcp2515_write_can_id(MCP_RXF0SIDH, 1, 0); // RXB0: extended 
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
    mcp2515_write_can_id(MCP_RXF1SIDH, 0, 0); //       AND standard
 64e:	84 e0       	ldi	r24, 0x04	; 4
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	40 e0       	ldi	r20, 0x00	; 0
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
    mcp2515_write_can_id(MCP_RXF2SIDH, 1, 0); // RXB1: extended 
 65e:	88 e0       	ldi	r24, 0x08	; 8
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	50 e0       	ldi	r21, 0x00	; 0
 66a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
    mcp2515_write_can_id(MCP_RXF3SIDH, 0, 0); //       AND standard
 66e:	80 e1       	ldi	r24, 0x10	; 16
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	20 e0       	ldi	r18, 0x00	; 0
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
    mcp2515_write_can_id(MCP_RXF4SIDH, 0, 0);
 67e:	84 e1       	ldi	r24, 0x14	; 20
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	40 e0       	ldi	r20, 0x00	; 0
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
    mcp2515_write_can_id(MCP_RXF5SIDH, 0, 0);
 68e:	88 e1       	ldi	r24, 0x18	; 24
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	40 e0       	ldi	r20, 0x00	; 0
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_write_can_id>
	
	// Clear, deactivate the three transmit buffers
	// TXBnCTRL -> TXBnD7
    a1 = MCP_TXB0CTRL;
 69e:	10 e3       	ldi	r17, 0x30	; 48
	a2 = MCP_TXB1CTRL;
	a3 = MCP_TXB2CTRL;
    for (i = 0; i < 14; i++) { // in-buffer loop
		mcp2515_setRegister(a1, 0);
 6a0:	81 2f       	mov	r24, r17
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
		mcp2515_setRegister(a2, 0);
 6a8:	81 2f       	mov	r24, r17
 6aa:	80 5f       	subi	r24, 0xF0	; 240
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
		mcp2515_setRegister(a3, 0);
 6b2:	81 2f       	mov	r24, r17
 6b4:	80 5e       	subi	r24, 0xE0	; 224
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
        a1++;
 6bc:	1f 5f       	subi	r17, 0xFF	; 255
	// Clear, deactivate the three transmit buffers
	// TXBnCTRL -> TXBnD7
    a1 = MCP_TXB0CTRL;
	a2 = MCP_TXB1CTRL;
	a3 = MCP_TXB2CTRL;
    for (i = 0; i < 14; i++) { // in-buffer loop
 6be:	1e 33       	cpi	r17, 0x3E	; 62
 6c0:	79 f7       	brne	.-34     	; 0x6a0 <mcp2515_initCANBuffers+0x84>
		a2++;
		a3++;
    }
	
    // and clear, deactivate the two receive buffers.
    mcp2515_setRegister(MCP_RXB0CTRL, 0);
 6c2:	80 e6       	ldi	r24, 0x60	; 96
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
    mcp2515_setRegister(MCP_RXB1CTRL, 0);
 6ca:	80 e7       	ldi	r24, 0x70	; 112
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>
}
 6d2:	1f 91       	pop	r17
 6d4:	08 95       	ret

000006d6 <mcp2515_set_config_mode>:

#define CANCTRL_REQOP_MASK          0xe0
#define CANCTRL_REQOP_CONF          0x80

uint8_t mcp2515_set_config_mode() {
    uint8_t cctrl = mcp2515_readRegister(MCP_CANCTRL);
 6d6:	8f e0       	ldi	r24, 0x0F	; 15
 6d8:	0e 94 0d 01 	call	0x21a	; 0x21a <mcp2515_readRegister>

    cctrl |=  (1 << 7);
 6dc:	68 2f       	mov	r22, r24
 6de:	60 68       	ori	r22, 0x80	; 128
    cctrl &= ~(1 << 6);
    cctrl &= ~(1 << 5);
 6e0:	6f 79       	andi	r22, 0x9F	; 159

    mcp2515_setRegister(MCP_CANCTRL, cctrl);
 6e2:	8f e0       	ldi	r24, 0x0F	; 15
 6e4:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_setRegister>

    // Read to verify setted bits
    cctrl = mcp2515_readRegister(MCP_CANCTRL);
 6e8:	8f e0       	ldi	r24, 0x0F	; 15
 6ea:	0e 94 0d 01 	call	0x21a	; 0x21a <mcp2515_readRegister>

    if ( (cctrl & CANCTRL_REQOP_MASK) == CANCTRL_REQOP_CONF ) {
 6ee:	98 2f       	mov	r25, r24
 6f0:	90 7e       	andi	r25, 0xE0	; 224
        return MCP2515_OK; 
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 38       	cpi	r25, 0x80	; 128
 6f6:	09 f4       	brne	.+2      	; 0x6fa <mcp2515_set_config_mode+0x24>
 6f8:	80 e0       	ldi	r24, 0x00	; 0
	} else {
        return MCP2515_FAIL;
	}
}
 6fa:	08 95       	ret

000006fc <mcp2515_init>:

// ---

#include <util/delay.h>
uint8_t mcp2515_init(const uint8_t canSpeed)
{
 6fc:	1f 93       	push	r17
 6fe:	df 93       	push	r29
 700:	cf 93       	push	r28
 702:	0f 92       	push	r0
 704:	cd b7       	in	r28, 0x3d	; 61
 706:	de b7       	in	r29, 0x3e	; 62
	uint8_t res;
	
	//MCP2515_UNSELECT();
	//MCP_CS_DDR |= ( 1 << MCP_CS_BIT );
	
	mcp2515_reset();
 708:	89 83       	std	Y+1, r24	; 0x01
 70a:	0e 94 01 01 	call	0x202	; 0x202 <mcp2515_reset>
    MCP2515_SELECT();
 70e:	c3 98       	cbi	0x18, 3	; 24
	//res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
#endif
	
	//if ( res == MCP2515_FAIL ) return res; //return MCP2515_OK;   // function exit on error 
	
	res = mcp2515_configRate(canSpeed);
 710:	89 81       	ldd	r24, Y+1	; 0x01
 712:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp2515_configRate>
 716:	18 2f       	mov	r17, r24
	
	if ( res == MCP2515_OK ) {
 718:	88 23       	and	r24, r24
 71a:	61 f4       	brne	.+24     	; 0x734 <mcp2515_init+0x38>
		mcp2515_initCANBuffers();
 71c:	0e 94 0e 03 	call	0x61c	; 0x61c <mcp2515_initCANBuffers>
			MCP_RXB_RX_ANY);
#else
		// enable both receive-buffers to receive messages
		// with std. and ext. identifiers
		// and enable rollover
		mcp2515_modifyRegister(MCP_RXB0CTRL, 
 720:	80 e6       	ldi	r24, 0x60	; 96
 722:	64 e6       	ldi	r22, 0x64	; 100
 724:	44 e0       	ldi	r20, 0x04	; 4
 726:	0e 94 8e 01 	call	0x31c	; 0x31c <mcp2515_modifyRegister>
			MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK, 
			MCP_RXB_RX_STDEXT | MCP_RXB_BUKT_MASK );
		mcp2515_modifyRegister(MCP_RXB1CTRL, MCP_RXB_RX_MASK, 
 72a:	80 e7       	ldi	r24, 0x70	; 112
 72c:	60 e6       	ldi	r22, 0x60	; 96
 72e:	40 e0       	ldi	r20, 0x00	; 0
 730:	0e 94 8e 01 	call	0x31c	; 0x31c <mcp2515_modifyRegister>
			MCP_RXB_RX_STDEXT);
#endif

	}
    MCP2515_UNSELECT();
 734:	c3 9a       	sbi	0x18, 3	; 24
 736:	28 ee       	ldi	r18, 0xE8	; 232
 738:	33 e0       	ldi	r19, 0x03	; 3
 73a:	40 e9       	ldi	r20, 0x90	; 144
 73c:	51 e0       	ldi	r21, 0x01	; 1
 73e:	fa 01       	movw	r30, r20
 740:	31 97       	sbiw	r30, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <mcp2515_init+0x44>
 744:	21 50       	subi	r18, 0x01	; 1
 746:	30 40       	sbci	r19, 0x00	; 0
 748:	d1 f7       	brne	.-12     	; 0x73e <mcp2515_init+0x42>
    _delay_ms(100);
//return MCP2515_OK;
	return res;
}
 74a:	81 2f       	mov	r24, r17
 74c:	0f 90       	pop	r0
 74e:	cf 91       	pop	r28
 750:	df 91       	pop	r29
 752:	1f 91       	pop	r17
 754:	08 95       	ret

00000756 <timebase_init>:
	TCNT1 = TIMEBASE_RELOAD;
}
*/
void timebase_init(void)
{
	TCCR0 = (1<<CS01) | (1<<CS00); // prescaler: 64
 756:	83 e0       	ldi	r24, 0x03	; 3
 758:	83 bf       	out	0x33, r24	; 51
	TCNT0 = TIMEBASE_RELOAD; // set initial reload-value
 75a:	86 e0       	ldi	r24, 0x06	; 6
 75c:	82 bf       	out	0x32, r24	; 50
	TIFR  |= (1<<TOV0);  // clear overflow int.
 75e:	88 b7       	in	r24, 0x38	; 56
 760:	82 60       	ori	r24, 0x02	; 2
 762:	88 bf       	out	0x38, r24	; 56
	TIMSK |= (1<<TOIE0); // enable overflow-interrupt
 764:	89 b7       	in	r24, 0x39	; 57
 766:	82 60       	ori	r24, 0x02	; 2
 768:	89 bf       	out	0x39, r24	; 57
}
 76a:	08 95       	ret

0000076c <timebase_actTime>:
uint16_t timebase_actTime(void)
{
	uint8_t sreg;
	uint16_t res;
	
	sreg=SREG;
 76c:	8f b7       	in	r24, 0x3f	; 63
	cli();
 76e:	f8 94       	cli

	res = gMilliSecTick;
 770:	20 91 06 01 	lds	r18, 0x0106
 774:	30 91 07 01 	lds	r19, 0x0107
	
	SREG=sreg;
 778:	8f bf       	out	0x3f, r24	; 63
	
	return res;
}
 77a:	c9 01       	movw	r24, r18
 77c:	08 95       	ret

0000077e <timebase_passedTimeMS>:
uint16_t timebase_passedTimeMS(uint16_t t0)
{
	uint8_t sreg;
	uint16_t res;
	
	sreg=SREG;
 77e:	4f b7       	in	r20, 0x3f	; 63
	cli();
 780:	f8 94       	cli

	res = (uint16_t)(gMilliSecTick-t0);
 782:	20 91 06 01 	lds	r18, 0x0106
 786:	30 91 07 01 	lds	r19, 0x0107
	
	SREG=sreg;
 78a:	4f bf       	out	0x3f, r20	; 63
	uint16_t res;
	
	sreg=SREG;
	cli();

	res = (uint16_t)(gMilliSecTick-t0);
 78c:	28 1b       	sub	r18, r24
 78e:	39 0b       	sbc	r19, r25
	
	SREG=sreg;
	
	return res;
}
 790:	c9 01       	movw	r24, r18
 792:	08 95       	ret

00000794 <delayloop32>:
#include <inttypes.h>

#include "delay.h"

void delayloop32(uint32_t loops) 
{
 794:	dc 01       	movw	r26, r24
 796:	cb 01       	movw	r24, r22
  __asm__ volatile ( "cp  %A0,__zero_reg__ \n\t"  \
 798:	81 15       	cp	r24, r1
 79a:	91 05       	cpc	r25, r1
 79c:	a1 05       	cpc	r26, r1
 79e:	b1 05       	cpc	r27, r1
 7a0:	29 f0       	breq	.+10     	; 0x7ac <L_Exit_7>

000007a2 <L_LOOP_7>:
 7a2:	81 50       	subi	r24, 0x01	; 1
 7a4:	90 40       	sbci	r25, 0x00	; 0
 7a6:	a0 40       	sbci	r26, 0x00	; 0
 7a8:	b0 40       	sbci	r27, 0x00	; 0
 7aa:	d9 f7       	brne	.-10     	; 0x7a2 <L_LOOP_7>

000007ac <L_Exit_7>:
                     : "=w" (loops)              \
					 : "0"  (loops)              \
                   );                             \
    
	return;
}
 7ac:	08 95       	ret

000007ae <_exit>:
 7ae:	f8 94       	cli

000007b0 <__stop_program>:
 7b0:	ff cf       	rjmp	.-2      	; 0x7b0 <__stop_program>
