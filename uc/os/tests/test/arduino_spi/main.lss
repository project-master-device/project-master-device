
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006b4  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000003a  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000f6  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c5  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012d  00000000  00000000  00000a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000b1  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  00000c71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  9e:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <spi_init>:
#define SPIMOSI PB3
#define SPIMISO PB4
#define SPISS PB2

void spi_init() {
    SPIDDR |= (1 << SPISCK);
  a6:	25 9a       	sbi	0x04, 5	; 4
    SPIDDR |= (1 << SPIMOSI);
  a8:	23 9a       	sbi	0x04, 3	; 4
    SPIDDR |= (1 << SPISS);
  aa:	22 9a       	sbi	0x04, 2	; 4
	SPIDDR &= ~(1 << SPIMISO);
  ac:	24 98       	cbi	0x04, 4	; 4
    
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  ae:	81 e5       	ldi	r24, 0x51	; 81
  b0:	8c bd       	out	0x2c, r24	; 44
}
  b2:	08 95       	ret

000000b4 <spi_readwrite>:

uint8_t spi_readwrite(uint8_t data) {
	SPDR = data;
  b4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <spi_readwrite+0x2>

	return SPDR;
  bc:	8e b5       	in	r24, 0x2e	; 46
}
  be:	08 95       	ret

000000c0 <main>:
#define SPIMOSI PB3
#define SPIMISO PB4
#define SPISS PB2

void spi_init() {
    SPIDDR |= (1 << SPISCK);
  c0:	25 9a       	sbi	0x04, 5	; 4
    SPIDDR |= (1 << SPIMOSI);
  c2:	23 9a       	sbi	0x04, 3	; 4
    SPIDDR |= (1 << SPISS);
  c4:	22 9a       	sbi	0x04, 2	; 4
	SPIDDR &= ~(1 << SPIMISO);
  c6:	24 98       	cbi	0x04, 4	; 4
    
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  c8:	81 e5       	ldi	r24, 0x51	; 81
  ca:	8c bd       	out	0x2c, r24	; 44
}

uint8_t spi_readwrite(uint8_t data) {
	SPDR = data;
  cc:	87 ee       	ldi	r24, 0xE7	; 231
  ce:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  d0:	0d b4       	in	r0, 0x2d	; 45
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <main+0x10>

	return SPDR;
  d6:	9e b5       	in	r25, 0x2e	; 46
  d8:	fa cf       	rjmp	.-12     	; 0xce <main+0xe>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
